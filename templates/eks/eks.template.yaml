---
AWSTemplateFormatVersion: '2010-09-09'


Parameters:
  VPC:
    Description: VPC
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1:
    Description:  Private Subnet 1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description:  Private Subnet 2
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3:
    Description:  Private Subnet 3
    Type: AWS::EC2::Subnet::Id
  EKSWorkerNodeInstanceType:
    Description: Instance type for the worker nodes
    Type: String
    Default: t3.micro
  EKSNodeGroupMinSize:
    Description: Minimum Size of the EKS Node Group
    Type: Number
    Default: 1
  EKSNodeGroupMaxSize:
    Description: Maximum Size of the EKS Node Group
    Type: Number
    Default: 10
  EKSNodeGroupDesiredSize:
    Description: Desired Size of the EKS Node Group
    Type: Number
    Default: 3

Mappings:
  ServicePrincipals:
    aws-cn:
      ec2: ec2.amazonaws.com.cn
    aws:
      ec2: ec2.amazonaws.com

Resources:
  EKSControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for the Control Plane

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSNodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap [ServicePrincipals, !Ref "AWS::Partition", ec2]
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  EKSNodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap [ServicePrincipals, !Ref "AWS::Partition", ec2]
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy"
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: java-app-demo-cluster
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      RoleArn: !GetAtt EKSClusterRole.Arn
      Version: 1.18

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2_x86_64
      ClusterName: !Ref EKSCluster
      InstanceTypes:
        - !Ref EKSWorkerNodeInstanceType
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      ScalingConfig:
        DesiredSize: !Ref EKSNodeGroupDesiredSize
        MaxSize: !Ref EKSNodeGroupMaxSize
        MinSize: !Ref EKSNodeGroupMinSize
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

Outputs:
  EKSClusterSecurityGroup:
    Description: Security Group of the EKS Cluster
    Value: !GetAtt EKSCluster.ClusterSecurityGroupId
  EKSClusterName:
    Description: EKS Cluster Name
