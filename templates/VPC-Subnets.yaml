AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Template that creates a VPC with six subnets, 4 public using 6/8 of the IPs in AZ zones 1 to 4 and 2 privates with the 2/8 remaining in AZ 3 and 4. It creates an internet gateway and a NAT gateway. Creates by default an open security group that authorizes all the inbound and outbound traffic for the VPC.
Parameters:
  00EnvType:
    Default: QA
    Type: String
    AllowedValues:
    - PROD
    - QA
    - DEV
  01VpcCIDR:
    Description: IP Range (CIDR Notation) for VPC. For Small VPCs, use /24 (254 IPs). For Bigger, use /16. Follow RFC 1918
    Type: String
    Default: 10.192.0.0/24
  02PublicSubnet1CIDR:
    Description: IP Range for Subnet 1. Main public subnet, should cover 1/4 of IPs.
    Type: String
    Default: 10.192.0.0/26
  03PublicSubnet2CIDR:
    Description: IP Range for Subnet 2. Main public subnet, should cover 1/4 of IPs.
    Type: String
    Default: 10.192.0.64/26
  04PublicSubnet3CIDR:
    Description: IP Range for Subnet 3. Support public subnet, should cover 1/8 of IPs.
    Type: String
    Default: 10.192.0.128/27
  05PublicSubnet4CIDR:
    Description: IP Range for Subnet 4. Support public subnet, should cover 1/8 of IPs.
    Type: String
    Default: 10.192.0.160/27
  06PrivateSubnet1CIDR:
    Description: IP Range for Subnet 5. Main private subnet, should cover 1/8 of IPs.
    Type: String
    Default: 10.192.0.192/27
  07PrivateSubnet2CIDR:
    Description: IP Range for Subnet 6. Main private subnet, should cover 1/8 of IPs.
    Type: String
    Default: 10.192.0.224/27

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 01VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType}-VPC
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType}-Internet-Gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref 02PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref 03PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref 04PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Public Subnet (AZ3)

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 3, !GetAZs  '' ]
      CidrBlock: !Ref 05PublicSubnet4CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Public Subnet (AZ4)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref 06PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Private Subnet (AZ3)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 3, !GetAZs  '' ]
      CidrBlock: !Ref 07PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Private Subnet (AZ4)

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet4


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Private Routes (AZ3)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${00EnvType} Private Routes (AZ4)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "VPC-Security-Group"
      GroupDescription: "Default Security Group"
      VpcId: !Ref VPC
  DefaultSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupOutbound:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      CidrIp: 0.0.0.0/0


